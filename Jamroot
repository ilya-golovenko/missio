
import modules ;
import feature ;

path-constant TOP : . ;
path-constant SRC : src ;
path-constant OBJ : obj ;
path-constant LIB : lib ;
path-constant PERF : perf ;


BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;

if $(BOOST_ROOT)
{
    use-project /boost : $(BOOST_ROOT) ;
}


rule boost-libraries-search-path ( properties * )
{
    local result = <search>/usr/lib <search>/usr/local/lib <search>/opt/local/lib ;

    if <address-model>64 in $(properties)
    {
        result += <search>/usr/lib64 <search>/usr/local/lib64 <search>/opt/local/lib64 ;
    }

    return $(result) ;
}


# BOOST libraries (pre-installed system version)

lib boost_system : : <name>boost_system <conditional>@boost-libraries-search-path ;
lib boost_date_time : : <name>boost_date_time <conditional>@boost-libraries-search-path ;
lib boost_filesystem : : <name>boost_filesystem <conditional>@boost-libraries-search-path ;


rule find-boost-libraries ( properties * )
{
    local result ;

    if <boost>source in $(properties) || ( $(BOOST_ROOT) && <target-os>windows in $(properties) )
    {
        if ! $(BOOST_ROOT)
        { 
            echo ;
            echo "Required environment variable BOOST_ROOT is not set" ;
            echo "Please set it to point to the root of BOOST source distribution" ;
            exit ;
        }

        result += <include>$(BOOST_ROOT)
                  <define>BOOST_ALL_NO_LIB
                  <define>BOOST_SYSTEM_NO_DEPRECATED
                  <define>BOOST_FILESYSTEM_VERSION=3
                  <define>BOOST_FILESYSTEM_NO_DEPRECATED
                  <define>BOOST_SPIRIT_USE_PHOENIX_V3 ;

        local libs = <library>/boost/system//boost_system
                     <library>/boost/date_time//boost_date_time
                     <library>/boost/filesystem//boost_filesystem ;

        if <boost-link>static in $(properties)
        {
            if <link>shared in $(properties)
            {
                result += <define>BOOST_ALL_DYN_LINK ;
                result += $(libs)/<link>static/<define>BOOST_ALL_DYN_LINK ;

                if <toolset>gcc in $(properties) && ! <target-os>windows in $(properties)
                {
                    result += <cflags>-fPIC ;
                }
            }
            else
            {
                result += $(libs)/<link>static ;
            }
        }
        else
        {
            result += $(libs)/<link>shared ;
        }
    }
    else
    {
        if <target-os>windows in $(properties)
        {
            echo ;
            echo "Building missio using pre-installed system version of BOOST libraries is not supported on Windows" ;
            echo "Please set BOOST_ROOT environment variable to point to the root of BOOST source distribution" ;
            exit ;
        }

        result += <include>/usr/include
                  <include>/usr/local/include
                  <include>/opt/local/include ;

        result += <library>boost_system
                  <library>boost_date_time
                  <library>boost_filesystem ;
    }

    return $(result) ;
}


# BOOST libraries

alias boost-libraries
    :
        ## sources ##
    :
        ## build requirements ##
        <conditional>@find-boost-libraries
    :
        ## default build ##
    :
        ## usage requirements ##
        <conditional>@find-boost-libraries
    ;


feature.feature boost : auto system source : link-incompatible propagated ;
feature.feature boost-link : auto static shared : propagated composite ;


# Code coverage

variant coverage : debug : <cxxflags>--coverage <linkflags>--coverage ;


rule building-missio ( properties * )
{
    local result ;

    if <toolset>gcc in $(properties)
    {
        result += <cxxflags>-std=c++14 ;

        result += <cxxflags>-Wempty-body
                  <cxxflags>-Wsign-compare
                  <cxxflags>-Wtype-limits
                  <cxxflags>-Wno-unknown-pragmas
                  <cxxflags>-Wno-unused-variable
                  <cxxflags>-Wno-unused-parameter
                  <cxxflags>-Wno-unused-local-typedefs
                  <cxxflags>-fdiagnostics-show-option ;
    }

    if <toolset>clang in $(properties)
    {
        result += <cxxflags>-std=c++1y ;
        result += <cxxflags>-Wno-deprecated-register ;
    }

    if <target-os>windows in $(properties)
    {
        result += <define>WIN32
                  <define>_WIN32
                  <define>NOMINMAX
                  <define>WIN32_LEAN_AND_MEAN
                  <define>_WIN32_WINNT=0x0601
                  <define>_WINSOCK_DEPRECATED_NO_WARNINGS ;
    }

    if <toolset>msvc in $(properties)
    {
        result += <define>_SCL_SECURE_NO_WARNINGS
                  <define>_SCL_SECURE_NO_DEPRECATE
                  <define>_CRT_SECURE_NO_WARNINGS
                  <define>_CRT_SECURE_NO_DEPRECATE
                  <define>_CRT_NONSTDC_NO_DEPRECATE ;

        result += <cxxflags>/wd4100
                  <cxxflags>/wd4127
                  <cxxflags>/wd4244
                  <cxxflags>/wd4251
                  <cxxflags>/wd4275
                  <cxxflags>/wd4345
                  <cxxflags>/wd4512
                  <cxxflags>/wd4702
                  <cxxflags>/wd4714
                  <cxxflags>/wd4800 ;
    }

    if <link>shared in $(properties) && ( <toolset>gcc in $(properties) || <toolset>clang in $(properties) )
    {
        result += <cflags>-fvisibility=hidden <cxxflags>-fvisibility-inlines-hidden ;
    }

    return $(result) ;
}


rule building-missio-default ( properties * )
{
    local result ;

    if <target-os>windows in $(properties)
    {
        result += <link>static <runtime-link>static ;
    }
    else
    {
        result += <link>shared <runtime-link>shared ;
    }

    return $(result) ;
}


project missio
    :
        requirements
        <warnings>on
        <warnings-as-errors>on
        <include>$(TOP)
        <conditional>@building-missio
        <link>shared:<define>MISSIO_BUILD_SHARED
    :
        default-build
        <variant>release
        <variant>debug
        <threading>multi
        <conditional>@building-missio-default
    :
        usage-requirements
        <include>$(TOP)
        <link>shared:<define>MISSIO_LINK_SHARED
    :
        build-dir $(OBJ)
    ;


use-project /missio : $(TOP) ;

use-project /missio/logging : $(SRC)/logging/build ;
use-project /missio/unicode : $(SRC)/unicode/build ;
use-project /missio/format : $(SRC)/format/build ;
use-project /missio/json : $(SRC)/json/build ;

use-project /missio/logging/test : $(SRC)/logging/test ;
use-project /missio/unicode/test : $(SRC)/unicode/test ;
use-project /missio/format/test : $(SRC)/format/test ;
use-project /missio/json/test : $(SRC)/json/test ;

#use-project /missio/logging/perf : $(SRC)/logging/perf ;
#use-project /missio/unicode/perf : $(SRC)/unicode/perf ;
use-project /missio/format/perf : $(SRC)/format/perf ;
#use-project /missio/json/perf : $(SRC)/json/perf ;


alias /missio/lib
    :
        ## sources ##
        /missio/logging
        /missio/unicode
        /missio/format
        #/missio/json
    ;


alias /missio/test
    :
        ## sources ##
        /missio/logging/test
        /missio/unicode/test
        /missio/format/test
        #/missio/json/test
    ;


alias /missio/perf
    :
        ## sources ##
        #/missio/logging/perf
        #/missio/unicode/perf
        /missio/format/perf
        #/missio/json/perf
    ;


install missio-lib
    :
        ## sources ##
        /missio/lib
    :
        ## build requirements ##
        <variant>coverage:<location>$(LIB)/coverage
        <variant>release:<location>$(LIB)/release
        <variant>profile:<location>$(LIB)/profile
        <variant>debug:<location>$(LIB)/debug
    ;


install missio-perf
    :
        ## sources ##
        /missio/perf
    :
        ## build requirements ##
        <variant>coverage:<location>$(PERF)/coverage
        <variant>release:<location>$(PERF)/release
        <variant>profile:<location>$(PERF)/profile
        <variant>debug:<location>$(PERF)/debug
    ;
